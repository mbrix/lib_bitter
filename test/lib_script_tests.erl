%
% [Ember Financial] INC ("COMPANY") CONFIDENTIAL
% Unpublished Copyright (c) 2014-2015 [Ember Financial, Inc], All Rights Reserved.
%
% NOTICE:  All information contained herein is, and remains the property of
% COMPANY. The intellectual and technical concepts contained herein are 
% proprietary to COMPANY and may be covered by U.S. and Foreign Patents, 
% patents in process, and are protected by trade secret or copyright law.
% Dissemination of this information or reproduction of this material is 
% strictly forbidden unless prior written permission is obtained from COMPANY.
% Access to the source code contained herein is hereby forbidden to anyone 
% except current COMPANY employees, managers or contractors who have executed 
% Confidentiality and Non-disclosure agreements explicitly covering such access.
%
% The copyright notice above does not evidence any actual or intended publication
% or disclosure  of  this source code, which includes information that is
% confidential and/or proprietary, and is a trade secret, of  COMPANY.  
% ANY REPRODUCTION, MODIFICATION, DISTRIBUTION, PUBLIC  PERFORMANCE, OR PUBLIC
% DISPLAY OF OR THROUGH USE  OF THIS  SOURCE CODE  WITHOUT  THE EXPRESS WRITTEN
% CONSENT OF COMPANY IS STRICTLY PROHIBITED, AND IN VIOLATION OF APPLICABLE 
% LAWS AND INTERNATIONAL TREATIES.  THE RECEIPT OR POSSESSION OF  THIS SOURCE
% CODE AND/OR RELATED INFORMATION DOES NOT CONVEY OR IMPLY ANY RIGHTS TO
% REPRODUCE, DISCLOSE OR DISTRIBUTE ITS CONTENTS, OR TO MANUFACTURE, USE, OR
% SELL ANYTHING THAT IT  MAY DESCRIBE, IN WHOLE OR IN PART.                
%

-module(lib_script_tests).
-author('mbranton@emberfinancial.com').


-include_lib("../include/bitter.hrl").
-include_lib("eunit/include/eunit.hrl").


start() -> ok.
stop(_) -> ok.


%% Scipting language tests

match() ->
	Script = [op_dup, op_hash160,
			  {hex, "0c1b83d01d0ffb2bccae606963376cca3863a7ce"},
			  op_equalverify, op_checksig],
	A = lib_script:build(Script),
	B = iolist_to_binary(A),
	C = hex:hexstr_to_bin("76a9140c1b83d01d0ffb2bccae606963376cca3863a7ce88ac"),
	D = lib_script:ops(hex, B),
	?assertEqual(B, C),
	?assertEqual(Script, D).

simple_eval() ->
	Script = iolist_to_binary([?OP_2, ?OP_3, ?OP_4, ?OP_5, ?OP_6]),
	?assertEqual([6,5,4,3,2], e(Script)).

simple_if() ->
	Script = iolist_to_binary([?OP_1, ?OP_IF, ?OP_2, ?OP_ENDIF]),
	Stack = e(Script),
	?assertEqual([2], Stack).

simple_ifelse() ->
	Script = iolist_to_binary([?OP_0, ?OP_IF, ?OP_2, ?OP_ELSE, ?OP_3, ?OP_ENDIF]),
	Stack = e(Script),
	?assertEqual([3], Stack).

multiple_else() ->
	Script = iolist_to_binary([?OP_1, ?OP_IF, ?OP_2, ?OP_ELSE, ?OP_3, ?OP_ELSE, ?OP_4,
							   ?OP_ELSE, ?OP_5, ?OP_ELSE, ?OP_6, ?OP_ENDIF]),
	Stack = e(Script),
	?assertEqual([6,4,2], Stack).

nested_ifs() ->
	Script = iolist_to_binary([?OP_1, ?OP_IF, ?OP_1, ?OP_IF, ?OP_2, ?OP_ELSE, ?OP_3, ?OP_ELSE, ?OP_4,
			  ?OP_ELSE, ?OP_5, ?OP_ELSE, ?OP_6, ?OP_ENDIF, ?OP_ENDIF]),
	Stack = e(Script),
	?assertEqual([6,4,2], Stack).

dangling_endif() ->
	Script = iolist_to_binary([?OP_1, ?OP_2, ?OP_ENDIF]),
	?assertEqual(false, e(Script)).

dangling_else()->
	Script = iolist_to_binary([?OP_2, ?OP_ELSE]),
	?assertEqual(false, e(Script)).

extra_if() ->
	Script = iolist_to_binary([?OP_1, ?OP_IF]),
	?assertEqual(false, e(Script)).

op_notif() ->
	Script = ib([?OP_0, ?OP_NOTIF, ?OP_2, ?OP_ENDIF]),
	?assertEqual([2], e(Script)).

op_verif() ->
	Script = ib([?OP_VERIF]),
	?assertEqual(false, e(Script)).

op_notverif() ->
	Script = ib([?OP_VERNOTIF]),
	?assertEqual(false, e(Script)).

op_verify() ->
	?assertEqual([1], e(ib([?OP_1, ?OP_VERIFY]))),
	?assertEqual(false, e(ib([?OP_VERIFY]))),
	?assertEqual(false, e(ib([?OP_0, ?OP_VERIFY]))).

op_return() ->
	?assertEqual(false, e(ib([?OP_RETURN]))).

op_altstack() ->
	?assertEqual(false, e(ib([?OP_FROMALTSTACK]))),
	?assertEqual([2], e(ib([?OP_2, ?OP_TOALTSTACK, ?OP_FROMALTSTACK]))).

op_2drop() ->
	?assertEqual([2,1], e(ib([?OP_1, ?OP_2, ?OP_3, ?OP_4, ?OP_2DROP]))).

op_2dup() -> 
	?assertEqual([4,3,4,3,2,1], e(ib([?OP_1, ?OP_2, ?OP_3, ?OP_4, ?OP_2DUP]))).

op_3dup() ->
	?assertEqual([4,3,2,4,3,2,1], e(ib([?OP_1, ?OP_2, ?OP_3, ?OP_4, ?OP_3DUP]))).

op_2over() ->
	?assertEqual([2,1,4,3,2,1], e(ib([?OP_1, ?OP_2, ?OP_3, ?OP_4, ?OP_2OVER]))).

op_2rot() ->
	?assertEqual([2,1,6,5,4,3], e(ib([?OP_1, ?OP_2, ?OP_3, ?OP_4, ?OP_5, ?OP_6, ?OP_2ROT]))).

op_2swap() ->
	?assertEqual([4,3,6,5,2,1], e(ib([?OP_1, ?OP_2, ?OP_3, ?OP_4, ?OP_5, ?OP_6, ?OP_2SWAP]))).

op_ifdup() ->
	?assertEqual([4,4], e(ib([?OP_4, ?OP_IFDUP]))),
	?assertEqual([0], e(ib([?OP_0, ?OP_IFDUP]))).

op_depth() ->
	?assertEqual([0], e(ib([?OP_DEPTH]))),
	?assertEqual([6,6,5,4,3,2,1], e(ib([?OP_1, ?OP_2, ?OP_3, ?OP_4, ?OP_5, ?OP_6, ?OP_DEPTH]))).

op_drop() ->
	?assertEqual([1], e(ib([?OP_1, ?OP_0, ?OP_DROP]))).

op_dup() ->
	?assertEqual([0,0,1], e(ib([?OP_1, ?OP_0, ?OP_DUP]))).

op_nip() ->
	?assertEqual([0], e(ib([?OP_1, ?OP_0, ?OP_NIP]))).

op_over() ->
	?assertEqual([1,2,1], e(ib([?OP_1, ?OP_2, ?OP_OVER]))).


op_pick() ->
	?assertEqual([2,6,5,4,3,2,1],
				 e(ib([?OP_1, ?OP_2, ?OP_3, ?OP_4, ?OP_5, ?OP_6, ?OP_4, ?OP_PICK]))).

op_roll() ->
	?assertEqual([2,6,5,4,3,1],
				 e(ib([?OP_1, ?OP_2, ?OP_3, ?OP_4, ?OP_5, ?OP_6, ?OP_4, ?OP_ROLL]))).

op_rot() ->
	?assertEqual([2,4,3,1], e(ib([?OP_1, ?OP_2, ?OP_3, ?OP_4, ?OP_ROT]))).

op_swap() -> ?assertEqual([2,3,1], e(ib([?OP_1, ?OP_2, ?OP_3, ?OP_SWAP]))).
op_tuck() -> ?assertEqual([2,1,2], e(ib([?OP_1, ?OP_2, ?OP_TUCK]))).

op_cat() -> ?assertEqual(false, e(ib([?OP_1, ?OP_CAT]))).
op_substr() -> ?assertEqual(false, e(ib([?OP_1, ?OP_SUBSTR]))).
op_left() -> ?assertEqual(false, e(ib([?OP_1, ?OP_LEFT]))).
op_right() -> ?assertEqual(false, e(ib([?OP_1, ?OP_RIGHT]))).
op_size() -> ?assertEqual([5, <<1:(8*5)>>], e(ib([5, <<1:(8*5)>>, ?OP_SIZE]))).
op_invert() -> ?assertEqual(false, e(ib([?OP_1, ?OP_INVERT]))).
op_and() -> ?assertEqual(false, e(ib([?OP_1, ?OP_AND]))).
op_or() -> ?assertEqual(false, e(ib([?OP_1, ?OP_OR]))).
op_xor() -> ?assertEqual(false, e(ib([?OP_1, ?OP_XOR]))).
op_equal() -> 
	?assertEqual([1, 2, 2], e(ib([?OP_2, ?OP_2, ?OP_EQUAL]))),
	?assertEqual([0, 2, 3], e(ib([?OP_3, ?OP_2, ?OP_EQUAL]))).

op_equalverify() ->
	?assertEqual([], e(ib([?OP_2, ?OP_2, ?OP_EQUALVERIFY]))),
	?assertEqual(false, e(ib([?OP_2, ?OP_3, ?OP_EQUALVERIFY]))).

op_reserved() ->
	%% Unexecuted IF
	?assertEqual([2], e(ib([?OP_0, ?OP_IF, ?OP_RESERVED, ?OP_ELSE, ?OP_2, ?OP_ENDIF]))), 
	?assertEqual(false, e(ib([?OP_1, ?OP_RESERVED]))).

op_reserved1() ->
	?assertEqual(false, e(ib([?OP_1, ?OP_RESERVED1]))).
op_reserved2() ->
	?assertEqual(false, e(ib([?OP_1, ?OP_RESERVED2]))).

op_1add() ->
	?assertEqual([2], e(ib([?OP_1, ?OP_1ADD]))).

op_1sub() ->
	?assertEqual([1], e(ib([?OP_2, ?OP_1SUB]))).

op_2mul() -> ?assertEqual(false, e(ib([?OP_1, ?OP_2MUL]))).
op_2div() -> ?assertEqual(false, e(ib([?OP_1, ?OP_2DIV]))).

op_negate() -> ?assertEqual([-2], e(ib([?OP_2, ?OP_NEGATE]))).
op_abs() -> ?assertEqual([2], e(ib([?OP_2, ?OP_NEGATE, ?OP_ABS]))).
op_not() ->
	?assertEqual([0], e(ib([?OP_1, ?OP_NOT]))),
	?assertEqual([1], e(ib([?OP_0, ?OP_NOT]))),
	?assertEqual([0], e(ib([?OP_5, ?OP_NOT]))).

op_0notequal() -> 
	?assertEqual([0], e(ib([?OP_0, ?OP_0NOTEQUAL]))),
	?assertEqual([1], e(ib([?OP_1, ?OP_0NOTEQUAL]))),
	?assertEqual([1], e(ib([?OP_5, ?OP_0NOTEQUAL]))).

op_add() -> 
	?assertEqual([5], e(ib([?OP_2, ?OP_3, ?OP_ADD]))).

op_sub() ->
	?assertEqual([-1], e(ib([?OP_2, ?OP_3, ?OP_SUB]))).

op_mul() -> ?assertEqual(false, e(ib([?OP_2, ?OP_3, ?OP_MUL]))).
op_div() -> ?assertEqual(false, e(ib([?OP_2, ?OP_3, ?OP_DIV]))).
op_mod() -> ?assertEqual(false, e(ib([?OP_2, ?OP_3, ?OP_MOD]))).
op_lshift() -> ?assertEqual(false, e(ib([?OP_2, ?OP_3, ?OP_LSHIFT]))).
op_rshift() -> ?assertEqual(false, e(ib([?OP_2, ?OP_3, ?OP_RSHIFT]))).
op_booland() ->
	?assertEqual([1], e(ib([?OP_1, ?OP_1, ?OP_BOOLAND]))),
	?assertEqual([0], e(ib([?OP_0, ?OP_1, ?OP_BOOLAND]))),
	?assertEqual([0], e(ib([?OP_1, ?OP_0, ?OP_BOOLAND]))).

op_boolor() ->
	?assertEqual([0], e(ib([?OP_0, ?OP_0, ?OP_BOOLOR]))),
	?assertEqual([1], e(ib([?OP_0, ?OP_1, ?OP_BOOLOR]))),
	?assertEqual([1], e(ib([?OP_1, ?OP_0, ?OP_BOOLOR]))),
	?assertEqual([1], e(ib([?OP_1, ?OP_1, ?OP_BOOLOR]))).

op_numequal() ->
	?assertEqual([1], e(ib([?OP_5, ?OP_5, ?OP_NUMEQUAL]))),
	?assertEqual([0], e(ib([?OP_5, ?OP_6, ?OP_NUMEQUAL]))).

op_numequalverify() ->
	?assertEqual([], e(ib([?OP_5, ?OP_5, ?OP_NUMEQUALVERIFY]))),
	?assertEqual(false, e(ib([?OP_5, ?OP_6, ?OP_NUMEQUALVERIFY]))).

op_numnotequal() ->
	?assertEqual([0], e(ib([?OP_5, ?OP_5, ?OP_NUMNOTEQUAL]))),
	?assertEqual([1], e(ib([?OP_5, ?OP_6, ?OP_NUMNOTEQUAL]))).

op_lessthan() ->
	?assertEqual([0], e(ib([?OP_5, ?OP_5, ?OP_LESSTHAN]))),
	?assertEqual([1], e(ib([?OP_5, ?OP_6, ?OP_LESSTHAN]))),
	?assertEqual([0], e(ib([?OP_6, ?OP_5, ?OP_LESSTHAN]))).

op_greaterthan() ->
	?assertEqual([0], e(ib([?OP_5, ?OP_5, ?OP_GREATERTHAN]))),
	?assertEqual([0], e(ib([?OP_5, ?OP_6, ?OP_GREATERTHAN]))),
	?assertEqual([1], e(ib([?OP_6, ?OP_5, ?OP_GREATERTHAN]))).

op_lessthanorequal() ->
	?assertEqual([1], e(ib([?OP_5, ?OP_5, ?OP_LESSTHANOREQUAL]))),
	?assertEqual([1], e(ib([?OP_5, ?OP_6, ?OP_LESSTHANOREQUAL]))),
	?assertEqual([0], e(ib([?OP_6, ?OP_5, ?OP_LESSTHANOREQUAL]))).

op_greaterthanorequal() ->
	?assertEqual([1], e(ib([?OP_5, ?OP_5, ?OP_GREATERTHANOREQUAL]))),
	?assertEqual([0], e(ib([?OP_5, ?OP_6, ?OP_GREATERTHANOREQUAL]))),
	?assertEqual([1], e(ib([?OP_6, ?OP_5, ?OP_GREATERTHANOREQUAL]))).

op_min() ->
	?assertEqual([5], e(ib([?OP_5, ?OP_5, ?OP_MIN]))),
	?assertEqual([5], e(ib([?OP_5, ?OP_6, ?OP_MIN]))),
	?assertEqual([5], e(ib([?OP_6, ?OP_5, ?OP_MIN]))).

op_max() ->
	?assertEqual([5], e(ib([?OP_5, ?OP_5, ?OP_MAX]))),
	?assertEqual([6], e(ib([?OP_5, ?OP_6, ?OP_MAX]))),
	?assertEqual([6], e(ib([?OP_6, ?OP_5, ?OP_MAX]))).

op_within() ->
	?assertEqual([1], e(ib([?OP_5, ?OP_5, ?OP_10, ?OP_WITHIN]))),
	?assertEqual([1], e(ib([?OP_6, ?OP_5, ?OP_10, ?OP_WITHIN]))),
	?assertEqual([0], e(ib([?OP_5, ?OP_6, ?OP_10, ?OP_WITHIN]))).

op_ripemd160() ->
	?assertEqual([<<92,0,189,74,202,4,169,5,124,9,178,11,5,247,35,242,226,
  61,235,101>>], e(ib([20, <<0:(20*8)>>, ?OP_RIPEMD160]))).

op_sha1() ->
	?assertEqual([<<103,104,3,62,33,100,104,36,123,208,49,160,162,217,135,
  109,121,129,143,143>>], e(ib([20, <<0:(20*8)>>, ?OP_SHA1]))).

op_sha256() ->
	?assertEqual([<<222,71,201,178,126,184,211,0,219,181,242,195,83,230,50,195,147,38,44,240,99,
  64,196,250,127,27,64,196,203,211,111,144>>], e(ib([20, <<0:(20*8)>>, ?OP_SHA256]))).

op_hash160() ->
	?assertEqual([<<148,79,153,124,85,83,166,243,225,2,142,112,124,113,181,
  250,13,211,175,167>>], e(ib([20, <<0:(20*8)>>, ?OP_HASH160]))).

op_hash256() -> 
	?assertEqual([<<246,234,183,185,26,66,52,38,208,109,168,68,52,116,114,153,74,115,140,198,177,
  5,197,250,105,95,116,131,40,24,209,115>>], e(ib([20, <<0:(20*8)>>, ?OP_HASH256]))).

op_codeseparator() -> 
	?assertEqual([], e(ib([?OP_CODESEPARATOR]))).
	
op_checknops() ->
	?assertEqual([], e(ib([?OP_NOP1, ?OP_NOP5, ?OP_NOP10]))).

get_ops() ->
	Script = <<?OP_0>>,
	?assertEqual([op_0], lib_script:ops(Script)).

get_p2pkh() ->
	Script = <<?OP_DUP:8, ?OP_HASH160:8, 16#14:8, 2:160, ?OP_EQUALVERIFY:8, ?OP_CHECKSIG:8>>,
	?assertEqual([op_dup, op_hash160, <<2:160>>, op_equalverify, op_checksig], lib_script:ops(Script)).

input() ->
	Hex = "48304502206ddbbb8642be5296457374b517a1b3249b86ed76f33c40cbbce2cc2b3c443ec8022100a636b8e9260e513c57b34654d69e45980ec1b47837fd907173607f9a2c8ec85b01210271e2e20a8ebc7423ef5cd4a88f57fc03a36b7f22342a7275309e713dd1528ce1",
	[A,B] = lib_script:ops(hex:hexstr_to_bin(Hex)),
	?assertEqual(72, size(A)),
	?assertEqual(33, size(B)).

coinbase_tx() ->
	Bin = hex:hexstr_to_bin("410496b538e853519c726a2c91e61ec11600ae1390813a627c66fb8be7947be63c52da7589379515d4e0a604f8141781e62294721166bf621e73a82cbf2342c858eeac"),
	[_A,B] = lib_script:ops(Bin),
	?assertEqual(op_checksig, B).

validate_p2pkh() ->
	Tx = lib_parse:parse_tx(btxdef, hex:hexstr_to_bin("0100000001802f6b5f7515e9b11575926b25c340b69964924aaf792a00627edcaab9d3d2bd000000006c493046022100ac7e4e27f2b11cb86fb5aa872ab9d32cdc083380733e3e9847ff77a069cddfab022100c04c3e6ffe88a15bc507b8e571aa35928acfe15a4a23201b08fe3c7b3c97c88f0121024005c945d86ac6b01fb04258345abea7a845bd25689edb723d5ad4068ddd3036ffffffff026073f040000000001976a914406d7324bacc8f7ee02091dedd707770fc3ff38288ac80969800000000001976a91406f1b67078fc400a63d54c313cd6bb817e4760f088ac00000000")),
	TxIndex = 0,
	I = bblock:input(Tx, 0),
	ScriptSig = bblock:script(I),
	?assertEqual(ScriptSig, hex:hexstr_to_bin("493046022100ac7e4e27f2b11cb86fb5aa872ab9d32cdc083380733e3e9847ff77a069cddfab022100c04c3e6ffe88a15bc507b8e571aa35928acfe15a4a23201b08fe3c7b3c97c88f0121024005c945d86ac6b01fb04258345abea7a845bd25689edb723d5ad4068ddd3036")),
	ScriptPubKey = hex:hexstr_to_bin("76a9140c1b83d01d0ffb2bccae606963376cca3863a7ce88ac"),
	?assertEqual(true, lib_script:eval(ScriptSig, ScriptPubKey, TxIndex, Tx)).

scripts1() ->
	%% Multiple Inputs (Index off by one error)
	ScriptPubKey = <<118,169,20,192,250,89,158,131,18,148,15,33,169,66,196,223,193,255,
             166,24,72,167,192,136,172>>,
    ScriptSig = <<71,48,68,2,32,32,191,138,54,200,105,44,162,228,175,61,36,187,157,79,
           205,95,54,169,117,143,50,173,87,102,169,38,183,173,17,251,155,2,32,
           10,56,50,174,86,160,58,220,159,120,46,37,59,37,35,134,114,118,70,
           162,30,98,139,69,97,239,201,65,37,127,237,33,1,65,4,238,18,95,206,
           151,120,137,14,140,214,24,192,70,210,107,182,83,220,182,162,152,75,
           114,79,167,234,9,130,212,210,33,138,202,115,222,187,165,178,89,128,
           6,218,241,169,102,6,129,229,99,2,105,189,15,161,104,202,46,169,210,
           72,180,7,108,225>>,
    Tx = lib_parse:parse_tx(btxdef, <<1,0,0,0,2,173,227,140,223,127,85,144,158,90,22,84,31,169,226,56,164,56,
       234,13,217,216,81,81,85,6,44,169,155,73,24,18,14,0,0,0,0,138,71,48,68,2,
       32,32,191,138,54,200,105,44,162,228,175,61,36,187,157,79,205,95,54,169,
       117,143,50,173,87,102,169,38,183,173,17,251,155,2,32,10,56,50,174,86,
       160,58,220,159,120,46,37,59,37,35,134,114,118,70,162,30,98,139,69,97,
       239,201,65,37,127,237,33,1,65,4,238,18,95,206,151,120,137,14,140,214,24,
       192,70,210,107,182,83,220,182,162,152,75,114,79,167,234,9,130,212,210,
       33,138,202,115,222,187,165,178,89,128,6,218,241,169,102,6,129,229,99,2,
       105,189,15,161,104,202,46,169,210,72,180,7,108,225,255,255,255,255,173,
       227,140,223,127,85,144,158,90,22,84,31,169,226,56,164,56,234,13,217,216,
       81,81,85,6,44,169,155,73,24,18,14,1,0,0,0,139,72,48,69,2,33,0,135,200,
       10,101,177,119,125,198,42,187,78,199,121,60,215,121,105,118,52,130,194,
       223,222,123,198,122,39,25,84,45,125,61,2,32,105,158,226,83,12,220,169,
       38,27,250,13,164,43,45,30,198,96,219,230,208,34,59,84,195,39,147,64,143,
       199,199,4,24,1,65,4,8,159,227,18,174,191,226,195,197,119,214,126,195,
       215,15,36,192,87,40,223,141,81,233,151,169,235,149,206,131,0,13,172,167,
       80,214,52,36,26,59,20,169,47,126,243,155,183,86,80,211,74,40,53,231,84,
       161,99,235,149,212,136,117,191,9,179,255,255,255,255,2,64,210,223,3,0,0,
       0,0,25,118,169,20,124,220,108,179,40,251,82,30,193,52,209,118,56,239,76,
       182,84,143,206,20,136,172,128,86,248,59,4,0,0,0,25,118,169,20,217,159,
       250,243,224,20,237,121,209,148,187,128,243,100,159,109,220,30,0,89,136,
       172,0,0,0,0>>),
    ?assertEqual(true, lib_script:eval(ScriptSig, ScriptPubKey, 0, Tx)). 

scripts2() ->
	%% Include OP_CODESEPARATOR in SCRIPTSIG PUSH
	ScriptPubKey = <<118,169,20,238,215,163,26,45,236,185,182,124,171,72,34,49,106,73,99,
           128,232,156,2,136,172>>, 
    ScriptSig = <<70,48,67,2,31,1,204,226,152,176,61,236,9,181,122,37,172,16,21,174,
             194,113,146,239,81,142,233,189,36,89,45,94,175,186,64,179,2,32,44,
             137,44,70,211,194,130,141,170,240,112,144,198,135,96,14,234,6,206,
             61,244,253,55,110,133,24,92,126,44,191,51,163,1,65,4,91,184,21,36,
             239,213,194,83,251,111,25,71,14,227,118,64,243,132,68,241,97,82,
             179,97,202,46,165,71,145,41,79,22,19,223,155,183,160,31,222,35,49,
             222,36,215,84,122,188,58,231,164,150,125,132,242,158,203,128,179,
             237,49,115,157,52,148>>,
    Tx = lib_parse:parse_tx(btxdef, <<1,0,0,0,2,30,73,37,79,101,33,5,128,182,254,131,109,11,179,90,84,201,97,
       11,243,51,151,21,109,140,92,137,213,151,155,206,126,0,0,0,0,139,72,48,
       69,2,33,0,165,219,70,105,230,61,46,124,123,12,109,126,15,44,183,102,125,
       95,34,125,83,59,224,204,22,213,81,229,74,85,80,235,2,32,39,14,189,126,
       111,6,231,201,4,175,255,194,247,153,225,173,28,255,68,113,1,49,244,93,
       83,122,126,164,103,52,169,19,1,65,4,128,159,55,185,126,235,4,222,122,27,
       113,217,190,20,32,141,125,233,44,167,164,247,44,35,135,169,181,213,95,
       99,14,242,212,199,81,130,88,109,238,14,190,149,88,101,10,128,172,229,90,
       105,224,151,204,230,157,30,145,210,76,15,53,121,201,10,255,255,255,255,
       30,73,37,79,101,33,5,128,182,254,131,109,11,179,90,84,201,97,11,243,51,
       151,21,109,140,92,137,213,151,155,206,126,1,0,0,0,137,70,48,67,2,31,1,
       204,226,152,176,61,236,9,181,122,37,172,16,21,174,194,113,146,239,81,
       142,233,189,36,89,45,94,175,186,64,179,2,32,44,137,44,70,211,194,130,
       141,170,240,112,144,198,135,96,14,234,6,206,61,244,253,55,110,133,24,92,
       126,44,191,51,163,1,65,4,91,184,21,36,239,213,194,83,251,111,25,71,14,
       227,118,64,243,132,68,241,97,82,179,97,202,46,165,71,145,41,79,22,19,
       223,155,183,160,31,222,35,49,222,36,215,84,122,188,58,231,164,150,125,
       132,242,158,203,128,179,237,49,115,157,52,148,255,255,255,255,2,128,95,
       17,72,3,0,0,0,25,118,169,20,229,244,183,127,168,71,165,188,118,1,216,55,
       169,157,3,174,144,123,136,173,136,172,0,132,4,73,1,0,0,0,25,118,169,20,
       5,105,83,25,40,199,199,4,130,235,121,132,47,102,171,98,46,64,72,139,136,
       172,0,0,0,0>>),
    %?debugFmt("YYY ~p~n", [Tx]),
    %?debugFmt("XXX ~p~n", [lib_script:ops(SubScriptBin)]),
    ?assertEqual(true, lib_script:eval(ScriptSig, ScriptPubKey, 1, Tx)). 


scripts3() ->
	%% OP_CHECKMULTISIG + CODESEPARATOR in Input Script
	ScriptPubKey = <<20,42,155,197,68,125,102,76,29,1,65,57,42,132,45,35,219,164,92,79,
           19,177,117>>,
    ScriptSig = <<0,71,48,68,2,32,39,109,109,173,61,239,163,123,95,129,173,211,153,
             45,81,13,47,68,163,23,253,133,224,79,147,161,226,218,234,100,102,
             2,2,32,15,134,42,13,166,132,36,147,34,206,184,237,132,47,184,200,
             89,192,203,148,200,30,28,83,8,180,134,129,87,164,40,238,1,171,81,
             33,2,50,171,220,137,62,127,6,49,54,77,127,208,28,179,61,36,218,69,
             50,154,0,53,123,58,120,134,33,26,180,20,213,90,81,174>>,
    Tx = lib_parse:parse_tx(btxdef, <<1,0,0,0,2,77,232,176,196,194,88,45,185,95,166,179,86,122,152,155,102,68,
       132,199,173,102,114,200,90,61,164,19,119,62,99,253,184,0,0,0,0,107,72,
       48,69,2,32,91,40,47,188,155,6,79,59,200,35,162,62,220,192,4,140,187,23,
       71,84,231,170,116,46,60,159,72,62,190,2,145,28,2,33,0,228,176,179,161,
       23,211,108,171,90,103,64,77,221,191,67,219,123,234,60,21,48,224,254,18,
       142,188,21,98,27,214,154,59,1,33,3,90,169,141,95,119,205,154,45,136,113,
       14,111,198,98,18,175,248,32,2,111,13,173,143,50,209,247,206,135,69,125,
       222,80,255,255,255,255,77,232,176,196,194,88,45,185,95,166,179,86,122,
       152,155,102,68,132,199,173,102,114,200,90,61,164,19,119,62,99,253,184,1,
       0,0,0,111,0,71,48,68,2,32,39,109,109,173,61,239,163,123,95,129,173,211,
       153,45,81,13,47,68,163,23,253,133,224,79,147,161,226,218,234,100,102,2,
       2,32,15,134,42,13,166,132,36,147,34,206,184,237,132,47,184,200,89,192,
       203,148,200,30,28,83,8,180,134,129,87,164,40,238,1,171,81,33,2,50,171,
       220,137,62,127,6,49,54,77,127,208,28,179,61,36,218,69,50,154,0,53,123,
       58,120,134,33,26,180,20,213,90,81,174,255,255,255,255,2,224,253,28,0,0,
       0,0,0,25,118,169,20,56,12,179,197,148,222,78,126,155,142,24,219,24,41,
       135,190,187,90,79,112,136,172,192,198,45,0,0,0,0,0,23,20,42,155,197,68,
       125,102,76,29,1,65,57,42,132,45,35,219,164,92,79,19,177,117,0,0,0,0>>),
    %?debugFmt("YYY ~p~n", [lib_script:ops(ScriptSig)]),
    %?debugFmt("XXX ~p~n", [lib_script:ops(SubScriptBin)]),
    ?assertEqual(true, lib_script:eval(ScriptSig, ScriptPubKey, 1, Tx)). 

sighash0() ->
	%TX SIGHASHTYPE 0 (SIGHASH OLD)
	ScriptSig = <<73,48,70,2,33,0,210,52,89,208,62,215,233,81,26,71,209,50,146,211,
             67,10,4,98,125,230,35,91,110,81,164,15,156,211,134,242,171,227,2,
             33,0,231,210,91,8,15,11,184,216,213,248,120,187,167,213,74,210,
             253,166,80,234,141,21,138,51,238,60,189,17,118,129,145,253,0,65,4,
             176,226,200,121,228,218,247,185,171,104,53,2,40,193,89,118,102,
             118,161,79,88,21,8,75,161,102,67,42,171,70,25,141,76,202,152,250,
             62,153,129,208,169,11,46,255,197,20,183,98,121,71,101,80,186,54,
             99,253,202,255,148,195,132,32,233,213>>,
    ScriptPubKey = <<118,169,20,220,68,177,22,65,136,6,124,58,50,212,120,15,89,150,250,
           20,164,242,217,136,172>>,
    Tx = lib_parse:parse_tx(btxdef, <<1,0,0,0,1,2,118,183,107,7,244,147,92,112,172,245,79,191,31,67,138,76,57,
       122,159,183,230,51,135,60,77,211,188,6,43,107,64,0,0,0,0,140,73,48,70,2,
       33,0,210,52,89,208,62,215,233,81,26,71,209,50,146,211,67,10,4,98,125,
       230,35,91,110,81,164,15,156,211,134,242,171,227,2,33,0,231,210,91,8,15,
       11,184,216,213,248,120,187,167,213,74,210,253,166,80,234,141,21,138,51,
       238,60,189,17,118,129,145,253,0,65,4,176,226,200,121,228,218,247,185,
       171,104,53,2,40,193,89,118,102,118,161,79,88,21,8,75,161,102,67,42,171,
       70,25,141,76,202,152,250,62,153,129,208,169,11,46,255,197,20,183,98,121,
       71,101,80,186,54,99,253,202,255,148,195,132,32,233,213,0,0,0,0,1,0,9,61,
       0,0,0,0,0,25,118,169,20,154,123,15,59,128,198,186,174,237,206,10,8,66,
       85,56,0,248,50,186,31,136,172,0,0,0,0>>),
    %?debugFmt("YYY ~p~n", [lib_script:ops(ScriptSig)]),
    %%?debugFmt("XXX ~p~n", [lib_script:ops(SubScriptBin)]),
    ?assertEqual(true, lib_script:eval(ScriptSig, ScriptPubKey, 0, Tx)). 

scripts4() ->
	%% Weird push data semantics.
	ScriptSig = <<76,123,48,69,2,33,0,153,214,245,137,126,236,111,44,74,235,60,203,
             67,220,25,244,95,74,67,55,47,214,138,158,131,91,236,70,49,89,230,
             98,2,32,54,93,85,77,135,214,86,144,122,246,169,201,135,104,144,12,
             126,140,251,211,53,45,16,140,72,211,131,205,107,8,246,160,42,42,
             42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,
             42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,
             42,42,42,42,42,1,65,4,191,229,150,103,231,198,202,230,221,68,216,
             237,100,108,73,163,129,134,24,156,244,168,76,187,107,86,63,169,20,
             209,84,155,77,28,173,1,109,186,101,176,110,21,78,30,100,112,175,
             150,212,97,147,20,48,53,95,108,6,50,172,141,165,213,240,38>>,
	ScriptPubKey = <<118,169,20,48,148,166,75,251,214,180,212,176,6,22,232,221,234,67,87,
 				  206,240,70,232,136,172>>,
 	Tx = lib_parse:parse_tx(btxdef, <<1,0,0,0,1,115,63,204,61,61,147,237,88,5,115,128,167,11,254,163,42,198,
       157,255,71,124,156,18,120,135,17,170,76,254,10,65,147,1,0,0,0,191,76,
       123,48,69,2,33,0,153,214,245,137,126,236,111,44,74,235,60,203,67,220,25,
       244,95,74,67,55,47,214,138,158,131,91,236,70,49,89,230,98,2,32,54,93,85,
       77,135,214,86,144,122,246,169,201,135,104,144,12,126,140,251,211,53,45,
       16,140,72,211,131,205,107,8,246,160,42,42,42,42,42,42,42,42,42,42,42,42,
       42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,
       42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,1,65,4,191,229,150,103,231,
       198,202,230,221,68,216,237,100,108,73,163,129,134,24,156,244,168,76,187,
       107,86,63,169,20,209,84,155,77,28,173,1,109,186,101,176,110,21,78,30,
       100,112,175,150,212,97,147,20,48,53,95,108,6,50,172,141,165,213,240,38,
       255,255,255,255,2,128,195,201,1,0,0,0,0,25,118,169,20,244,11,131,234,97,
       1,121,85,148,225,133,50,53,76,213,127,130,75,176,131,136,172,128,68,229,
       45,0,0,0,0,25,118,169,20,245,190,69,163,180,152,140,71,34,164,164,8,107,
       68,180,54,214,64,86,35,136,172,0,0,0,0>>),
    %?debugFmt("YYY ~p~n", [lib_script:ops(ScriptSig)]),
    %?debugFmt("~p~n", [lib_tx:readable_txhash(binary, Tx)]),
    %?debugFmt("YYY ~p~n", [hex:bin_to_hexstr(ScriptSig)]),
    %?debugFmt("XXX ~p~n", [lib_script:ops(ScriptSig)]),
    %?debugFmt("XXX ~p~n", [Stack]),
    ?assertEqual(true, lib_script:eval(ScriptSig, ScriptPubKey, 0, Tx)). 

sighash_none() ->
	%TX SIGHASHTYPE 2
	%ALso, strange DER encoding for R/S ECDSA values
	%http://bitcoin.stackexchange.com/questions/37469/blockchain-checksig-fail
	ScriptSig = <<71,48,68,2,32,187,79,188,73,90,162,59,171,178,194,190,78,63,180,
             165,223,254,254,32,200,239,245,148,15,19,86,73,195,234,150,68,74,
             2,32,4,175,205,169,102,200,7,187,151,98,45,62,239,234,130,143,98,
             58,243,6,239,43,117,103,130,238,111,138,34,169,89,162,2,65,4,241,
             147,154,230,176,30,132,155,240,93,14,213,31,213,185,43,121,160,
             227,19,227,243,137,199,38,241,31,163,225,68,217,34,123,7,232,168,
             124,14,227,99,114,233,103,224,144,209,27,119,119,7,170,115,239,
             172,171,255,255,162,133,192,11,54,34,214>>,
    ScriptPubKey = <<118,169,20,33,196,60,228,0,144,19,18,166,3,228,32,122,173,253,116,
           43,232,231,218,136,172>>,
    Tx = lib_parse:parse_tx(btxdef, <<1,0,0,0,1,95,56,108,138,56,66,201,169,220,250,155,120,190,120,90,64,167,
       189,160,139,100,100,107,227,101,67,1,234,204,252,141,94,1,0,0,0,138,71,
       48,68,2,32,187,79,188,73,90,162,59,171,178,194,190,78,63,180,165,223,
       254,254,32,200,239,245,148,15,19,86,73,195,234,150,68,74,2,32,4,175,205,
       169,102,200,7,187,151,98,45,62,239,234,130,143,98,58,243,6,239,43,117,
       103,130,238,111,138,34,169,89,162,2,65,4,241,147,154,230,176,30,132,155,
       240,93,14,213,31,213,185,43,121,160,227,19,227,243,137,199,38,241,31,
       163,225,68,217,34,123,7,232,168,124,14,227,99,114,233,103,224,144,209,
       27,119,119,7,170,115,239,172,171,255,255,162,133,192,11,54,34,214,255,
       255,255,255,2,64,66,15,0,0,0,0,0,25,118,169,20,102,13,78,243,167,67,227,
       230,150,173,153,3,100,229,85,194,113,173,80,75,136,172,32,114,200,1,0,0,
       0,0,25,118,169,20,33,196,60,228,0,144,19,18,166,3,228,32,122,173,253,
       116,43,232,231,218,136,172,0,0,0,0>>),
    %?debugFmt("XXX ~p~n", [lib_script:ops(ScriptPubKey)]),
    %?debugFmt("YYY ~p~n", [hex:bin_to_hexstr(ScriptPubKey)]),
    %?debugFmt("XXX ~p~n", [Stack]),
    ?assertEqual(true, lib_script:eval(ScriptSig, ScriptPubKey, 0, Tx)). 

scripts5() ->
	%NEW TX SIGHASHTYPE 129
	%Should fall through to default signing
	%and then SIGHASH_ANYONECANPAY
	ScriptSig = <<72,48,69,2,32,88,83,199,241,57,87,133,191,171,176,60,87,233,98,
             235,7,111,242,77,142,78,87,59,4,219,19,180,94,211,237,110,226,2,
             33,0,157,200,42,228,59,233,212,177,254,40,71,117,78,29,54,218,212,
             139,168,1,129,125,72,93,197,41,175,197,22,194,221,180,129,33,3,5,
             88,73,128,54,123,50,31,173,127,28,31,77,93,114,61,10,200,12,29,
             128,200,186,18,52,57,101,180,131,100,83,122>>,
    ScriptPubKey = <<118,169,20,133,81,228,138,83,222,205,28,252,99,7,154,69,129,188,204,
           250,209,169,60,136,172>>,
 Tx = lib_parse:parse_tx(btxdef, <<1,0,0,0,2,246,4,76,10,212,133,246,51,180,31,151,208,215,147,235,40,55,
       174,64,247,56,255,109,95,80,253,253,16,82,140,29,118,1,0,0,0,107,72,48,
       69,2,32,88,83,199,241,57,87,133,191,171,176,60,87,233,98,235,7,111,242,
       77,142,78,87,59,4,219,19,180,94,211,237,110,226,2,33,0,157,200,42,228,
       59,233,212,177,254,40,71,117,78,29,54,218,212,139,168,1,129,125,72,93,
       197,41,175,197,22,194,221,180,129,33,3,5,88,73,128,54,123,50,31,173,127,
       28,31,77,93,114,61,10,200,12,29,128,200,186,18,52,57,101,180,131,100,83,
       122,255,255,255,255,156,106,240,223,102,105,188,222,209,158,49,126,37,
       190,188,140,120,228,141,248,174,31,224,42,127,3,8,24,231,30,205,64,1,0,
       0,0,108,73,48,70,2,33,0,130,105,201,215,186,10,126,115,13,209,111,64,
       130,210,158,54,132,251,116,99,186,6,79,208,147,175,193,112,173,110,3,
       136,2,33,0,188,109,118,55,57,22,163,255,110,228,27,44,117,32,1,253,163,
       201,224,72,188,255,13,129,208,91,57,255,15,66,23,178,129,33,3,170,227,3,
       216,37,66,21,69,197,188,124,205,90,200,125,213,173,211,188,195,164,50,
       186,122,162,242,102,22,153,249,246,89,255,255,255,255,1,224,147,4,0,0,0,
       0,0,25,118,169,20,92,17,249,23,136,59,146,126,239,119,220,87,112,122,
       235,133,63,109,56,148,136,172,0,0,0,0>> ),
    ?assertEqual(true, lib_script:eval(ScriptSig, ScriptPubKey, 0, Tx)). 

sighash_single() ->
	%% SIGHASH_SINGLE
	ScriptSig = <<71,48,68,2,32,54,13,32,186,255,56,32,89,4,11,169,190,152,148,127,
             214,120,251,8,170,178,187,12,23,46,250,153,111,216,236,233,183,2,
             32,27,79,176,222,103,240,21,201,14,122,200,161,147,174,171,72,106,
             31,88,126,15,84,208,251,149,82,239,127,92,230,202,236,3,33,3,87,
             156,162,230,209,7,82,47,1,44,208,11,82,185,166,95,180,111,12,87,
             185,184,182,227,119,196,143,82,106,68,116,26>>,
 ScriptPubKey = <<118,169,20,220,247,44,79,208,47,90,152,124,249,176,47,47,171,252,
           172,51,65,168,125,136,172>>,
 Tx = lib_parse:parse_tx(btxdef, <<1,0,0,0,3,112,172,10,26,229,136,170,242,132,195,8,214,124,169,44,105,
       163,158,45,184,19,55,229,99,191,64,197,157,160,165,207,99,0,0,0,0,106,
       71,48,68,2,32,54,13,32,186,255,56,32,89,4,11,169,190,152,148,127,214,
       120,251,8,170,178,187,12,23,46,250,153,111,216,236,233,183,2,32,27,79,
       176,222,103,240,21,201,14,122,200,161,147,174,171,72,106,31,88,126,15,
       84,208,251,149,82,239,127,92,230,202,236,3,33,3,87,156,162,230,209,7,82,
       47,1,44,208,11,82,185,166,95,180,111,12,87,185,184,182,227,119,196,143,
       82,106,68,116,26,255,255,255,255,125,129,91,100,71,227,95,190,160,151,
       224,14,2,143,183,223,186,212,243,240,152,123,71,52,103,108,132,243,252,
       208,232,4,1,0,0,0,107,72,48,69,2,33,0,199,20,49,11,225,227,169,255,28,
       95,124,172,198,92,45,142,120,31,195,168,140,235,6,60,97,83,191,149,6,80,
       128,33,2,32,11,45,9,121,199,110,18,187,72,13,166,53,241,146,204,141,198,
       249,5,56,13,212,172,31,243,90,79,104,244,98,255,253,3,33,3,87,156,162,
       230,209,7,82,47,1,44,208,11,82,185,166,95,180,111,12,87,185,184,182,227,
       119,196,143,82,106,68,116,26,255,255,255,255,63,31,9,115,51,228,212,109,
       81,245,231,123,83,38,77,184,247,245,210,225,130,23,225,9,153,87,208,245,
       175,119,19,238,1,0,0,0,108,73,48,70,2,33,0,182,99,73,158,247,50,115,163,
       120,141,234,52,39,23,194,100,10,196,60,90,28,248,98,201,224,155,32,111,
       203,63,107,184,2,33,0,176,153,114,231,89,114,217,20,143,43,221,70,46,92,
       182,155,87,193,33,75,136,252,85,202,99,134,118,192,124,252,16,216,3,33,
       3,87,156,162,230,209,7,82,47,1,44,208,11,82,185,166,95,180,111,12,87,
       185,184,182,227,119,196,143,82,106,68,116,26,255,255,255,255,3,128,132,
       30,0,0,0,0,0,25,118,169,20,191,178,130,199,12,65,145,244,91,90,102,101,
       202,209,104,47,44,156,253,251,136,172,128,132,30,0,0,0,0,0,25,118,169,
       20,152,87,204,7,190,211,58,92,241,43,156,94,5,0,182,117,213,0,200,17,
       136,172,224,253,28,0,0,0,0,0,25,118,169,20,67,197,40,80,96,108,135,36,3,
       192,96,30,105,250,52,178,111,98,219,74,136,172,0,0,0,0>>),
    ?assertEqual(true, lib_script:eval(ScriptSig, ScriptPubKey, 0, Tx)). 

scripts6() ->
	%% OP_CHECKMULTISIG 1 of 1
	%% AND  PUSHDATA2 exceeds available bytes
	ScriptSig = <<77,168,1,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
             255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
             255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
             255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
             255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
             255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
             255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
             255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
             255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
             255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
             255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
             255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
             255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
             255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
             255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
             255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
             255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
             255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
             255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
             255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
             255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
             255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
             255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
             255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
             255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
             255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
             255,255,255,255,255,255,255,255,255,255,72,48,69,2,33,0,164,47,
             221,141,33,47,2,233,92,127,184,130,113,53,232,131,5,231,92,127,
             188,95,147,120,130,167,170,35,147,18,214,234,2,32,8,38,52,135,179,
             40,80,151,63,56,240,130,66,205,123,111,205,150,249,152,182,107,
             150,227,246,31,110,187,108,138,177,117,1>>,
 ScriptPubKey = <<81,33,3,72,152,203,27,103,156,167,56,213,140,112,105,84,0,181,19,2,
           79,3,77,102,81,13,22,31,145,51,51,108,45,54,17,81,174>>,
 Tx = lib_parse:parse_tx(btxdef, <<1,0,0,0,1,27,107,249,156,93,146,19,154,204,31,166,147,113,99,190,110,
       200,209,242,198,143,228,42,252,212,224,232,181,142,92,10,50,0,0,0,0,253,
       244,1,77,168,1,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
       255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
       255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
       255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
       255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
       255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
       255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
       255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
       255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
       255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
       255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
       255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
       255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
       255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
       255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
       255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
       255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
       255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
       255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
       255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
       255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
       255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
       255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
       255,255,255,255,255,255,255,255,255,255,255,255,255,255,72,48,69,2,33,0,
       164,47,221,141,33,47,2,233,92,127,184,130,113,53,232,131,5,231,92,127,
       188,95,147,120,130,167,170,35,147,18,214,234,2,32,8,38,52,135,179,40,80,
       151,63,56,240,130,66,205,123,111,205,150,249,152,182,107,150,227,246,31,
       110,187,108,138,177,117,1,255,255,255,255,1,192,39,9,0,0,0,0,0,37,81,33,
       3,72,152,203,27,103,156,167,56,213,140,112,105,84,0,181,19,2,79,3,77,
       102,81,13,22,31,145,51,51,108,45,54,17,81,174,0,0,0,0>>),
    ?assertEqual(true, lib_script:eval(ScriptSig, ScriptPubKey, 0, Tx)). 

%scripts7() ->
%	%% 8 of 9 multisig
%	%% but then result is thrown out and byte array 0 is hashed and compared
%	%% to the p2sh hash
%	ScriptSig = <<0,72,48,69,2,32,15,43,127,133,253,200,69,75,127,228,152,73,99,134,
%             98,95,193,223,206,229,155,205,95,45,118,129,161,195,242,216,140,
%             159,2,33,0,193,2,36,116,70,165,211,253,91,211,196,20,20,66,51,234,
%             252,201,145,166,164,86,134,185,116,195,117,136,138,31,67,180,1,71,
%             48,68,2,32,57,101,89,73,128,190,115,186,83,119,145,152,73,189,131,
%             78,31,211,13,123,131,107,216,255,143,250,215,199,221,118,120,175,
%             2,32,91,150,228,178,58,82,222,35,108,102,72,199,84,255,60,58,57,
%             18,42,98,250,0,232,200,13,57,40,251,94,70,93,22,1,72,48,69,2,32,
%             93,214,1,56,147,21,242,184,236,116,194,138,250,44,111,185,191,251,
%             200,136,44,198,70,42,190,60,141,225,220,253,69,147,2,33,0,193,118,
%             141,157,249,163,159,113,232,245,175,150,143,182,96,220,83,181,155,
%             93,147,44,144,220,177,86,249,83,187,117,26,150,1,71,48,68,2,32,
%             107,164,87,193,138,178,43,41,118,8,76,50,100,53,183,241,62,194,85,
%             61,66,5,130,127,132,239,143,178,131,155,6,2,2,32,109,77,129,111,
%             237,163,52,189,45,174,192,89,123,186,32,181,171,26,14,135,129,169,
%             21,108,14,80,52,162,52,150,97,40,1,73,48,70,2,33,0,185,168,19,2,
%             132,147,174,12,200,31,189,177,140,82,217,222,67,226,126,211,140,
%             26,123,244,238,14,111,75,114,2,229,110,2,33,0,235,217,183,120,18,
%             150,52,96,254,0,73,160,115,57,27,238,164,47,77,216,190,248,34,56,
%             97,16,246,183,224,105,91,178,1,72,48,69,2,33,0,242,118,72,248,59,
%             108,122,204,250,212,17,99,246,127,251,178,200,22,22,177,94,191,
%             127,101,14,86,23,169,216,139,234,157,2,32,105,18,211,247,161,17,
%             37,107,251,147,3,152,38,109,124,133,249,53,123,217,195,217,139,
%             183,239,237,93,57,44,64,35,139,1,71,48,68,2,32,126,200,54,22,239,
%             113,15,19,130,193,144,60,191,56,118,12,92,14,90,134,2,93,176,52,
%             150,234,190,62,135,106,190,203,2,32,99,199,152,149,116,230,157,
%             234,50,233,48,11,7,254,170,109,199,126,86,123,218,39,129,209,52,
%             50,240,71,45,160,126,122,1,72,48,69,2,32,118,204,30,93,37,4,252,
%             17,37,217,210,38,7,199,129,74,238,183,229,161,72,171,188,25,149,
%             51,117,155,255,75,12,68,2,33,0,225,224,163,11,102,49,251,214,39,6,
%             21,146,215,210,110,18,34,99,191,186,212,20,128,100,76,144,87,132,
%             252,52,136,5,1,77,53,1,88,33,2,87,24,34,181,95,120,14,5,178,71,
%             241,59,119,1,177,61,176,124,171,68,109,64,230,206,157,193,38,3,
%             150,44,67,77,33,2,25,11,104,25,48,253,240,232,219,61,245,221,49,
%             169,157,183,21,25,90,198,179,177,223,77,76,109,7,69,230,23,153,
%             247,33,3,99,114,87,221,63,209,227,13,129,120,46,63,210,184,218,36,
%             63,216,134,89,38,4,176,68,65,128,165,54,244,168,187,215,33,3,45,
%             134,47,72,44,182,236,82,185,109,134,251,153,30,74,106,81,152,165,
%             58,87,64,254,211,104,225,77,238,19,34,157,72,33,2,229,85,209,157,
%             140,220,169,247,29,246,175,102,37,92,110,45,255,118,80,7,186,137,
%             139,55,236,206,167,114,108,34,185,32,33,2,248,178,40,99,66,193,
%             173,29,94,165,97,158,34,23,98,59,231,75,35,43,93,98,14,16,44,44,
%             67,244,187,12,232,47,33,3,75,39,249,164,46,192,54,216,235,23,214,
%             215,70,7,47,15,218,212,157,250,186,203,128,166,5,190,237,112,88,
%             79,21,199,33,3,85,205,132,197,164,100,104,235,215,123,79,201,151,
%             199,227,92,239,111,191,91,116,25,10,238,39,54,216,130,99,136,205,
%             251,33,3,81,189,139,45,147,130,158,9,183,91,56,128,136,234,51,71,
%             139,207,244,130,27,5,162,36,134,251,18,2,126,242,24,148,89,174>>,
% ScriptPubKey = <<169,20,127,177,137,223,103,158,178,249,123,62,60,90,129,235,242,0,
%           81,90,146,184,135>>,
% Tx = lib_parse:parse_tx(btxdef, <<1,0,0,0,1,75,17,244,24,94,108,27,186,151,25,79,33,56,199,50,55,6,8,236,
%       38,250,101,69,204,63,146,149,11,185,215,52,177,0,0,0,0,253,127,3,0,72,
%       48,69,2,32,15,43,127,133,253,200,69,75,127,228,152,73,99,134,98,95,193,
%       223,206,229,155,205,95,45,118,129,161,195,242,216,140,159,2,33,0,193,2,
%       36,116,70,165,211,253,91,211,196,20,20,66,51,234,252,201,145,166,164,86,
%       134,185,116,195,117,136,138,31,67,180,1,71,48,68,2,32,57,101,89,73,128,
%       190,115,186,83,119,145,152,73,189,131,78,31,211,13,123,131,107,216,255,
%       143,250,215,199,221,118,120,175,2,32,91,150,228,178,58,82,222,35,108,
%       102,72,199,84,255,60,58,57,18,42,98,250,0,232,200,13,57,40,251,94,70,93,
%       22,1,72,48,69,2,32,93,214,1,56,147,21,242,184,236,116,194,138,250,44,
%       111,185,191,251,200,136,44,198,70,42,190,60,141,225,220,253,69,147,2,33,
%       0,193,118,141,157,249,163,159,113,232,245,175,150,143,182,96,220,83,181,
%       155,93,147,44,144,220,177,86,249,83,187,117,26,150,1,71,48,68,2,32,107,
%       164,87,193,138,178,43,41,118,8,76,50,100,53,183,241,62,194,85,61,66,5,
%       130,127,132,239,143,178,131,155,6,2,2,32,109,77,129,111,237,163,52,189,
%       45,174,192,89,123,186,32,181,171,26,14,135,129,169,21,108,14,80,52,162,
%       52,150,97,40,1,73,48,70,2,33,0,185,168,19,2,132,147,174,12,200,31,189,
%       177,140,82,217,222,67,226,126,211,140,26,123,244,238,14,111,75,114,2,
%       229,110,2,33,0,235,217,183,120,18,150,52,96,254,0,73,160,115,57,27,238,
%       164,47,77,216,190,248,34,56,97,16,246,183,224,105,91,178,1,72,48,69,2,
%       33,0,242,118,72,248,59,108,122,204,250,212,17,99,246,127,251,178,200,22,
%       22,177,94,191,127,101,14,86,23,169,216,139,234,157,2,32,105,18,211,247,
%       161,17,37,107,251,147,3,152,38,109,124,133,249,53,123,217,195,217,139,
%       183,239,237,93,57,44,64,35,139,1,71,48,68,2,32,126,200,54,22,239,113,15,
%       19,130,193,144,60,191,56,118,12,92,14,90,134,2,93,176,52,150,234,190,62,
%       135,106,190,203,2,32,99,199,152,149,116,230,157,234,50,233,48,11,7,254,
%       170,109,199,126,86,123,218,39,129,209,52,50,240,71,45,160,126,122,1,72,
%       48,69,2,32,118,204,30,93,37,4,252,17,37,217,210,38,7,199,129,74,238,183,
%       229,161,72,171,188,25,149,51,117,155,255,75,12,68,2,33,0,225,224,163,11,
%       102,49,251,214,39,6,21,146,215,210,110,18,34,99,191,186,212,20,128,100,
%       76,144,87,132,252,52,136,5,1,77,53,1,88,33,2,87,24,34,181,95,120,14,5,
%       178,71,241,59,119,1,177,61,176,124,171,68,109,64,230,206,157,193,38,3,
%       150,44,67,77,33,2,25,11,104,25,48,253,240,232,219,61,245,221,49,169,157,
%       183,21,25,90,198,179,177,223,77,76,109,7,69,230,23,153,247,33,3,99,114,
%       87,221,63,209,227,13,129,120,46,63,210,184,218,36,63,216,134,89,38,4,
%       176,68,65,128,165,54,244,168,187,215,33,3,45,134,47,72,44,182,236,82,
%       185,109,134,251,153,30,74,106,81,152,165,58,87,64,254,211,104,225,77,
%       238,19,34,157,72,33,2,229,85,209,157,140,220,169,247,29,246,175,102,37,
%       92,110,45,255,118,80,7,186,137,139,55,236,206,167,114,108,34,185,32,33,
%       2,248,178,40,99,66,193,173,29,94,165,97,158,34,23,98,59,231,75,35,43,93,
%       98,14,16,44,44,67,244,187,12,232,47,33,3,75,39,249,164,46,192,54,216,
%       235,23,214,215,70,7,47,15,218,212,157,250,186,203,128,166,5,190,237,112,
%       88,79,21,199,33,3,85,205,132,197,164,100,104,235,215,123,79,201,151,199,
%       227,92,239,111,191,91,116,25,10,238,39,54,216,130,99,136,205,251,33,3,
%       81,189,139,45,147,130,158,9,183,91,56,128,136,234,51,71,139,207,244,130,
%       27,5,162,36,134,251,18,2,126,242,24,148,89,174,255,255,255,255,1,0,23,
%       100,7,0,0,0,0,25,118,169,20,54,138,9,194,203,30,16,255,42,191,54,129,97,
%       38,207,159,238,153,224,176,136,172,0,0,0,0>>),
%    ?assertEqual(true, lib_script:eval(ScriptSig, ScriptPubKey, 0, Tx)). 
%
%scripts8() ->
%	%% OP_RETURN in non executing IF branch
%	ScriptSig = <<81,99,82,103,106,103,81,104,148,140>>,
%	ScriptPubKey = <<"cQgQgjh">>,
%	Tx = lib_parse:parse_tx(btxdef, <<1,0,0,0,3,254,26,37,200,119,76,30,130,127,158,189,174,115,31,230,9,255,
%       21,157,111,124,21,9,78,29,70,122,153,160,30,3,16,0,0,0,0,2,1,42,255,255,
%       255,255,83,160,128,7,93,131,68,2,233,22,57,9,64,120,34,54,178,157,35,
%       219,111,82,223,201,64,161,43,62,255,153,21,156,0,0,0,0,0,255,255,255,
%       255,97,228,237,149,35,151,86,187,185,141,17,220,249,115,20,107,224,193,
%       124,193,204,148,52,13,235,139,196,212,76,216,142,146,0,0,0,0,10,81,99,
%       82,103,106,103,81,104,148,140,255,255,255,255,2,32,170,68,0,0,0,0,0,25,
%       118,169,20,155,192,187,221,48,36,218,77,12,56,237,26,236,245,198,141,
%       209,211,250,18,136,172,32,170,68,0,0,0,0,0,25,118,169,20,22,159,244,128,
%       79,214,89,109,235,151,79,54,12,33,88,74,161,225,156,151,136,172,0,0,0,0>>),
%
%    ?assertEqual(true, lib_script:eval(ScriptSig, ScriptPubKey, 2, Tx)). 

scripts9() ->
	%% Negative integer encoding and normal integer encoding must use
	%% Bitcoin compact integer representation
	ScriptSig = <<20,22,207,185,188,118,84,239,29,119,35,229,194,114,47,192,195,213,
             5,4,94>>,
    ScriptPubKey = <<130,118,81,160,105,143,170,169,168,167,166,135>>,
    Tx = lib_parse:parse_tx(btxdef, <<1,0,0,0,1,217,166,180,219,47,73,40,237,23,44,34,200,162,171,148,31,2,98,
       119,191,93,222,151,228,197,162,110,148,107,201,66,83,0,0,0,0,21,20,22,
       207,185,188,118,84,239,29,119,35,229,194,114,47,192,195,213,5,4,94,255,
       255,255,255,1,208,232,150,0,0,0,0,0,25,118,169,20,176,193,193,222,134,
       65,159,124,111,49,134,147,94,107,214,204,181,43,142,229,136,172,0,0,0,0>>),
    %?debugFmt("XXX ~p~n", [lib_script:ops(ScriptSig)]),
    %?debugFmt("YYY ~p~n", [hex:bin_to_hexstr(ScriptSig)]),
    ?assertEqual(true, lib_script:eval(ScriptSig, ScriptPubKey, 0, Tx)). 

%scripts10() ->
%	ScriptSig = <<79,1,228,1,100>>,
%	ScriptPubKey = <<"¥">>,
%	Tx = lib_parse:parse_tx(btxdef, <<1,0,0,0,5,96,224,181,6,27,8,166,9,17,201,178,112,44,192,235,168,10,219,
%       228,47,62,201,136,92,118,147,8,55,219,83,128,192,1,0,0,0,5,79,1,228,1,
%       100,255,255,255,255,13,47,229,116,156,150,241,94,55,206,237,41,0,44,127,
%       51,141,244,242,120,29,215,159,77,78,234,122,8,170,105,185,89,0,0,0,0,3,
%       81,81,155,255,255,255,255,13,47,229,116,156,150,241,94,55,206,237,41,0,
%       44,127,51,141,244,242,120,29,215,159,77,78,234,122,8,170,105,185,89,2,0,
%       0,0,4,82,1,130,147,255,255,255,255,13,47,229,116,156,150,241,94,55,206,
%       237,41,0,44,127,51,141,244,242,120,29,215,159,77,78,234,122,8,170,105,
%       185,89,3,0,0,0,4,91,90,81,147,255,255,255,255,13,47,229,116,156,150,241,
%       94,55,206,237,41,0,44,127,51,141,244,242,120,29,215,159,77,78,234,122,8,
%       170,105,185,89,4,0,0,0,4,91,90,81,147,255,255,255,255,6,0,45,49,1,0,0,0,
%       0,2,159,145,0,45,49,1,0,0,0,0,4,1,144,143,135,0,45,49,1,0,0,0,0,1,160,0,
%       45,49,1,0,0,0,0,7,5,254,255,255,255,128,135,48,211,151,0,0,0,0,0,25,118,
%       169,20,4,103,248,94,6,162,239,10,71,147,51,180,114,88,244,25,111,185,75,
%       44,136,172,0,45,49,1,0,0,0,0,6,4,255,255,255,127,156,0,0,0,0>>),
%    ?debugFmt("XXX ~p~n", [lib_script:ops(ScriptSig)]),
%    ?debugFmt("YYY ~p~n", [hex:bin_to_hexstr(ScriptSig)]),
%    ?assertEqual(true, lib_script:eval(ScriptSig, ScriptPubKey, 0, Tx)). 

%compacts() ->
%	%% Serialize number to compact form
%	?assertEqual(100, lib_script:setvch(<<"d">>)),
%	?debugFmt("negative test~n", []),
%	?assertEqual(-100, lib_script:setvch(<<"�">>)).
%	%% Deserialize compact form to number

%
%pretty_print() ->
%    RedeemScript = "522103ba32fabe4e941303dec02a987c99a763737c4402c34f81af0861bffd9790ecad21026210995d9db43ae6d0643d075f15293e3c7972938d7ee22b569f2d1467d2f59752ae",
%    RedeemScript2of3 = "522103431ba096db0ce23702e6d1ba21b35234403a9db1e7a2a3660b0a90692c24dfce2102089f5b2e8c7e2cb6e010a9f2f8409d29bf1cc9eb42a34efb7f726edc6a4f1bdc21026d9822a5ac516c391be820c794c05365fb200e29074bc6ee07eaafadffbb2c3a53ae",
%    R3 = "004b3045022100a97122ec9094ac2b6f6c567c4e7356fcdfa277b914e02e0373953cc92d0905170220791c8a9de7fa41af25bcb73f8a315fe681226bf60a414c34eeb5d07aa56aff0dd2a8da014b3045022100f942c96415c144f517a436a8387dcce85d69ced28fcc2e2b232c5cbe6b01bcd1022028b2a08772cb27954d2e9dcc93fe94351ef78a32b268d838aa0956628888af2f06f1c2014b3045022100e7efd0c0700053cbb8c8b6af803c1074789cd30166efa0cd03f5c6563fec2dc00220518aae75e1cf73eb5e40086870632a2bb53b4b387cde5055c662efe989e1f75f2b9602016952210397ed3f15a7da75daa706f1c25061399460e385737132412516ef925ee38d7fb4210308a4a546f3d88f351298b931aaf3e891414ab946c1e7d6163a772895fc1ce6452102d2a8daf506b59c5d9eba5c8ea71bfb612b33b1d3297c0e5dba062cb0a7978dbd53ae",
%    R4 = "004b3045022100fe1e46a75881cc19c8dbf02f5e7062e406bb1a608f01db608d19e775cdf39e1b02206e0efe03e58938bec8f7f89dfbb4d95f289c0e841eb1cc8e89cf87b132a1f6f2000000014b3044022078d0d05dbadbadd380e7a1f0065d6552260e11277022764682c8b9e1dbef3b6502201cf943677f8b5170076529d2c35150400c601cd3c6074ff32e03ce2d6eebe60eae00000001475221033cc517244b1e564082aa839755da6ce53db05cada5fa06b41451a901c949d9a8210374485822693b209ee4aded92c80cd76e8e9572e65308413af92a7097d48170d452ae",
%    ?debugFmt("YYY: ~p~n", [lib_script:pretty(R4)]),
%    ?debugFmt("XXX: ~p~n", [lib_script:pretty(R3)]).

script_test_() -> 
  {foreach,
  fun start/0,
  fun stop/1,
   [
	{"build and match", fun match/0},
	{"Simple eval", fun simple_eval/0},
	{"Simple if", fun simple_if/0},
	{"Simple ifelse", fun simple_ifelse/0},
	{"Multiple else", fun multiple_else/0},
	{"Nested ifs", fun nested_ifs/0},
	{"Dangling endif", fun dangling_endif/0},
	{"Dangling else", fun dangling_else/0},
	{"Extra if", fun extra_if/0},
	{"op_notif", fun op_notif/0},
	{"op_verif", fun op_verif/0},
	{"op_notverif", fun op_notverif/0},
	{"op_verify", fun op_verify/0},
	{"op_return", fun op_return/0},
	{"op_altstack", fun op_altstack/0},
	{"op_2drop", fun op_2drop/0},
	{"op_2dup", fun op_2dup/0},
	{"op_3dup", fun op_3dup/0},
	{"op_2over", fun op_2over/0},
	{"op_2rot", fun op_2rot/0},
	{"op_2swap", fun op_2swap/0},
	{"op_ifdup", fun op_ifdup/0},
	{"op_depth", fun op_depth/0},
	{"op_drop", fun op_drop/0},
	{"op_dup", fun op_dup/0},
	{"op_nip", fun op_nip/0},
	{"op_over", fun op_over/0},
	{"op_pick", fun op_pick/0},
	{"op_roll", fun op_roll/0},
	{"op_rot", fun op_rot/0},
	{"op_swap", fun op_swap/0},
	{"op_tuck", fun op_tuck/0},
	{"op_cat", fun op_cat/0},
	{"op_substr", fun op_substr/0},
	{"op_left", fun op_left/0},
	{"op_right", fun op_right/0},
	{"op_size", fun op_size/0},
	{"op_invert", fun op_invert/0},
	{"op_and", fun op_and/0},
	{"op_or", fun op_or/0},
	{"or_xor", fun op_xor/0},
	{"op_equal", fun op_equal/0},
	{"op_equalverify", fun op_equalverify/0},
	{"op_reserved", fun op_reserved/0},
	{"op_reserved1", fun op_reserved1/0},
	{"op_reserved2", fun op_reserved2/0},
	{"op_1add", fun op_1add/0},
	{"op_1sub", fun op_1sub/0},
	{"op_2mul", fun op_2mul/0},
	{"op_2div", fun op_2div/0},
	{"op_negate", fun op_negate/0},
	{"op_abs", fun op_abs/0},
	{"op_not", fun op_not/0},
	{"op_0notequal", fun op_0notequal/0},
	{"op_add", fun op_add/0},
	{"op_sub", fun op_sub/0},
	{"op_mul", fun op_mul/0},
	{"op_div", fun op_div/0},
	{"op_mod", fun op_mod/0},
	{"op_lshift", fun op_lshift/0},
	{"op_rshift", fun op_rshift/0},
	{"op_booland", fun op_booland/0},
	{"op_boolor", fun op_boolor/0},
	{"op_numequal", fun op_numequal/0},
	{"op_numequalverify", fun op_numequalverify/0},
	{"op_numnotequal", fun op_numnotequal/0},
	{"op_lessthan", fun op_lessthan/0},
	{"op_greaterthan", fun op_greaterthan/0},
	{"op_lessthanorequal", fun op_lessthanorequal/0},
	{"op_greaterthanorequal", fun op_greaterthanorequal/0},
	{"op_min", fun op_min/0},
	{"op_max", fun op_max/0},
	{"op_within", fun op_within/0},
	{"op_ripemd160", fun op_ripemd160/0},
	{"op_sha1", fun op_sha1/0},
	{"op_sha256", fun op_sha256/0},
	{"op_hash160", fun op_hash160/0},
	{"op_hash256", fun op_hash256/0},
	{"op_codeseparator", fun op_codeseparator/0},
	{"op_check nops range", fun op_checknops/0},
	{"Get ops", fun get_ops/0},
	{"Get p2pkh", fun get_p2pkh/0},
	{"Input", fun input/0},
	{"Coinbase tx", fun coinbase_tx/0},
	{"validate p2pkh", fun validate_p2pkh/0},
	{"scripts 1", fun scripts1/0},
	{"scripts 2", fun scripts2/0},
	{"scripts 3", fun scripts3/0},
	{"sighash 0", fun sighash0/0},
	{"scripts 4", fun scripts4/0},
	{"sighash none", fun sighash_none/0},
	{"scripts 5", fun scripts5/0},
	{"Sighash single", fun sighash_single/0},
	{"scripts 6", fun scripts6/0},
	%{"scripts 7", fun scripts7/0},
	%{"scripts 7", fun scripts7/0},
	{"scripts 9", fun scripts9/0}
	%{"scripts 10", fun scripts10/0},
	%{"Compact numbers", fun compacts/0},
    %{"pretty print", fun pretty_print/0}
   ]
  }.


ib(X) -> iolist_to_binary(X). 
e(X) ->
	%?debugFmt("Eval: ~p~n", [lib_script:eval(X)]),
	{Stack, _, _} = lib_script:eval(X),
	Stack.
